# ConfigMap: Provides init.sh and sink.neo4j.json
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-neo4j-init-config
data:
  init.sh: |
    #!/bin/bash

    # Launch Kafka Connect
    /etc/confluent/docker/run &

    # Wait for Kafka Connect listener
    echo "Waiting for Kafka Connect to start listening on localhost ⏳"

    while : ; do
      curl_status=$(curl -s -o /dev/null -w %{http_code} http://localhost:8083/connectors)
      echo -e $(date) " Kafka Connect listener HTTP state: " $curl_status " (waiting for 200)"
      if [ $curl_status -eq 200 ] ; then
        break
      fi
      sleep 5 
    done

    echo -e "\n--\n+> Creating Data Generator source"

    curl -X POST http://localhost:8083/connectors/ -H "Content-Type:application/json" -H "Accept:application/json" -d @sink.neo4j.json
  sink.neo4j.json: |
    {
      "name": "Neo4jSinkConnectorJSONString",
      "config": {
        "topics": "nyc_taxicab_data",
        "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": false,
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter.schemas.enable": false,
        "errors.retry.timeout": "-1",
        "errors.retry.delay.max.ms": "1000",
        "errors.tolerance": "all",
        "errors.log.enable": true,
        "errors.log.include.messages": true,
        "neo4j.server.uri": "bolt://neo4j-service:7687",
        "neo4j.authentication.basic.username": "neo4j",
        "neo4j.authentication.basic.password": "project1phase2",
        "neo4j.topic.cypher.nyc_taxicab_data": "MERGE (p:Location {name: toInteger(event.PULocationID)}) MERGE (d:Location {name: toInteger(event.DOLocationID)}) MERGE (p)-[:TRIP {distance: toFloat(event.trip_distance), fare: toFloat(event.fare_amount)}]->(d)"
      }
    }

---

# Deployment: Launch the connector
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-neo4j-connector
  labels:
    app: kafka-neo4j-connector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-neo4j-connector
  template:
    metadata:
      labels:
        app: kafka-neo4j-connector
    spec:
      containers:
        - name: kafka-neo4j-connector
          image: roy012299/kafka-neo4j-connect:latest
          ports:
            - containerPort: 8083
          env:
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service:29092"
            - name: CONNECT_REST_ADVERTISED_HOST_NAME
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          command:
            - "/bin/bash"
            - "-c"
            - |
              mkdir -p /tmp/connector
              cp /app/init.sh /tmp/connector/init.sh
              cp /app/sink.neo4j.json /tmp/connector/sink.neo4j.json
              chmod +x /tmp/connector/init.sh

              bash /tmp/connector/init.sh

              tail -f /dev/null
          volumeMounts:
            - name: connector-scripts
              mountPath: /app
      volumes:
        - name: connector-scripts
          configMap:
            name: kafka-neo4j-init-config
